import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from estimation import load_all_data
from plot import generate_all_visualizations
import folium
from streamlit_folium import st_folium
import tempfile
import base64
import os

def show_folium_map(folium_map, width=700, height=500):
    """Mostrar mapa Folium de manera estable usando archivos temporales"""
    if folium_map is None:
        st.warning("Mapa no disponible")
        return
    
    try:
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as f:
            folium_map.save(f.name)
            html_file = f.name
        
        # Leer y mostrar el HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Mostrar como componente
        st.components.v1.html(html_content, width=width, height=height, scrolling=True)
        
        # Limpiar archivo temporal
        os.unlink(html_file)
        
    except Exception as e:
        st.error(f"Error mostrando mapa: {e}")


# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Hospital Access Peru Analysis",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üè• An√°lisis de Acceso a Hospitales en Per√∫")
st.markdown("---")

# Cargar datos (solo cache para datos, no para visualizaciones)
@st.cache_data(show_spinner="Cargando datos...", hash_funcs={folium.Map: lambda _: None})
def load_cached_data():
    return load_all_data()

# Funci√≥n para generar visualizaciones sin cache (porque Folium no es serializable)
def generate_visualizations_no_cache(data_dict):
    """Generar visualizaciones sin cache para evitar problemas de serializaci√≥n"""
    return generate_all_visualizations(data_dict)

# Cargar datos
data_dict = load_cached_data()

# Verificar que los datos se cargaron correctamente
if data_dict is None or data_dict['dataset_cv'] is None:
    st.error("Error al cargar los datos. Por favor verifica las rutas de los archivos.")
    st.stop()

# Crear pesta√±as
tab1, tab2, tab3 = st.tabs([
    "üóÇÔ∏è Data Description", 
    "üó∫Ô∏è Static Maps & Department Analysis", 
    "üåç Dynamic Maps"
])

with tab1:
    st.header("Descripci√≥n de Datos y Metodolog√≠a")
    
    # Unit of analysis
    st.subheader("Unidad de An√°lisis")
    st.write("Hospitales p√∫blicos operativos en Per√∫ seg√∫n datos oficiales del MINSA")
    
    # Data sources
    st.subheader("Fuentes de Datos")
    st.write("- **MINSA ‚Äì IPRESS**: Subconjunto operacional de establecimientos de salud")
    st.write("- **Centros Poblados**: Datos geogr√°ficos de localidades")
    st.write("- **Shapefiles**: L√≠mites distritales del Per√∫")
    
    # Filtering rules
    st.subheader("Reglas de Filtrado")
    st.write("‚úÖ **Estado operativo**: Estado = 'ACTIVADO'")
    st.write("‚úÖ **Condici√≥n funcional**: Condici√≥n = 'EN FUNCIONAMIENTO'")
    st.write("‚úÖ **Coordenadas v√°lidas**: Latitud y longitud no nulas")
    st.write("‚úÖ **Georreferenciaci√≥n**: Merge v√°lido con shapefile por UBIGEO")
    
    # M√©tricas clave
    st.subheader("M√©tricas Clave")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_hospitals = len(data_dict['dataset_cv'])
        st.metric("Total Hospitales", total_hospitals)
    
    with col2:
        total_departments = data_dict['dept_stats']['DEPARTAMENTO'].nunique()
        st.metric("Departamentos", total_departments)
    
    with col3:
        total_districts = data_dict['map_data']['UBIGEO'].nunique()
        st.metric("Distritos", total_districts)
    
    with col4:
        zero_hospitals = (data_dict['map_data']['num_hospitales'] == 0).sum()
        st.metric("Distritos sin Hospitales", zero_hospitals)
    
    # Mostrar sample de datos
    st.subheader("Muestra de Datos de Hospitales")
    st.dataframe(data_dict['dataset_cv'][['NOMBRE', 'DEPARTAMENTO', 'LATITUD', 'LONGITUD']].head(10))

with tab2:
    st.header("Mapas Est√°ticos y An√°lisis Departamental")
    
    # Solo generar visualizaciones cuando se accede a esta pesta√±a
    if 'tab2_visualizations' not in st.session_state:
        with st.spinner("Generando mapas est√°ticos..."):
            st.session_state.tab2_visualizations = generate_visualizations_no_cache(data_dict)
    
    visualizations = st.session_state.tab2_visualizations
    
    # Mapas est√°ticos
    st.subheader("Mapas de Distribuci√≥n de Hospitales")
    
    if visualizations and visualizations['static_maps']:
        col1, col2 = st.columns(2)
        
        with col1:
            st.pyplot(visualizations['static_maps']['map1_hospitales_distrito'])
            st.caption("Mapa 1: Hospitales por Distrito")
        
        with col2:
            st.pyplot(visualizations['static_maps']['map2_distritos_sin_hospitales'])
            st.caption("Mapa 2: Distritos sin Hospitales")
        
        st.pyplot(visualizations['static_maps']['map3_top10_distritos'])
        st.caption("Mapa 3: Top 10 Distritos con M√°s Hospitales")
    else:
        st.error("Error generando mapas est√°ticos")
    
    # An√°lisis departamental
    st.subheader("An√°lisis por Departamento")
    
    # Tabla resumen
    st.write("**Tabla Resumen - Hospitales por Departamento**")
    st.dataframe(data_dict['dept_stats'].sort_values('total_hospitals', ascending=False))
    
    # Gr√°fico de barras
    st.write("**Gr√°fico de Barras - Distribuci√≥n por Departamento**")
    if visualizations and visualizations['bar_chart']:
        st.pyplot(visualizations['bar_chart'])
    else:
        st.error("Error generando gr√°fico de barras")
    
    # Estad√≠sticas departamentales
    st.subheader("Estad√≠sticas Clave")
    highest_dept = data_dict['dept_stats'].iloc[0]
    lowest_dept = data_dict['dept_stats'].iloc[-1]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info(f"**Departamento con m√°s hospitales**: {highest_dept['DEPARTAMENTO']} ({highest_dept['total_hospitals']} hospitales)")
    
    with col2:
        st.warning(f"**Departamento con menos hospitales**: {lowest_dept['DEPARTAMENTO']} ({lowest_dept['total_hospitals']} hospitales)")

with tab3:
    st.header("Mapas Interactivos Din√°micos")
    
    # Solo generar visualizaciones cuando se accede a esta pesta√±a
    if 'tab3_visualizations' not in st.session_state:
        # Usar un placeholder para el spinner
        spinner_placeholder = st.empty()
        with spinner_placeholder:
            with st.spinner("Generando mapas interactivos..."):
                tab3_visualizations = generate_visualizations_no_cache(data_dict)
                st.session_state.tab3_visualizations = tab3_visualizations
        
        # Limpiar el spinner despu√©s de terminar
        spinner_placeholder.empty()

    visualizations = st.session_state.tab3_visualizations
    # Mapa nacional
    st.subheader("Mapa Nacional - Hospitales por Distrito")
    
    if visualizations and visualizations['national_map']:
        show_folium_map(visualizations['national_map'], width=700, height=500)
    else:
        st.error("Error generando mapa nacional")
    
    # Mapas de proximidad
    st.subheader("An√°lisis de Proximidad - Lima y Loreto")
    
    st.write("""
    **Leyenda:**
    - üî¥ C√≠rculo Rojo: Centro poblado con menor densidad hospitalaria (aislado)
    - üü¢ C√≠rculo Verde: Centro poblado con mayor densidad hospitalaria (concentrado)
    - üü¢ Marcadores Verdes: Hospitales dentro del radio de 10km
    """)
    
    # Lima
    st.write("### üèôÔ∏è Lima - Concentraci√≥n Urbana y Accesibilidad")
    if visualizations and visualizations['proximity_maps']:
        col1, col2 = st.columns(2)
        
        with col1:
            if 'lima_aislado' in visualizations['proximity_maps'] and visualizations['proximity_maps']['lima_aislado']:
                show_folium_map(visualizations['proximity_maps']['lima_aislado'], width=350, height=400)
                st.caption("Lima: Centro m√°s aislado (menos hospitales en 10km)")
            else:
                st.warning("Mapa de Lima aislado no disponible")
        
        with col2:
            if 'lima_concentrado' in visualizations['proximity_maps'] and visualizations['proximity_maps']['lima_concentrado']:
                show_folium_map(visualizations['proximity_maps']['lima_concentrado'], width=350, height=400)
                st.caption("Lima: Centro m√°s concentrado (m√°s hospitales en 10km)")
            else:
                st.warning("Mapa de Lima concentrado no disponible")
    else:
        st.error("Error generando mapas de proximidad")
    
    # Loreto
    st.write("### üå≥ Loreto - Dispersi√≥n Geogr√°fica y Desaf√≠os Amaz√≥nicos")
    if visualizations and visualizations['proximity_maps']:
        col1, col2 = st.columns(2)
        
        with col1:
            if 'loreto_aislado' in visualizations['proximity_maps'] and visualizations['proximity_maps']['loreto_aislado']:
                show_folium_map(visualizations['proximity_maps']['loreto_aislado'], width=350, height=400)
                st.caption("Loreto: Centro m√°s aislado (menos hospitales en 10km)")
            else:
                st.warning("Mapa de Loreto aislado no disponible")
        
        with col2:
            if 'loreto_concentrado' in visualizations['proximity_maps'] and visualizations['proximity_maps']['loreto_concentrado']:
                show_folium_map(visualizations['proximity_maps']['loreto_concentrado'], width=350, height=400)
                st.caption("Loreto: Centro m√°s concentrado (m√°s hospitales en 10km)")
            else:
                st.warning("Mapa de Loreto concentrado no disponible")
    
    # An√°lisis breve
    st.subheader("An√°lisis Comparativo")
    st.write("""
    **Lima**: Muestra patrones de concentraci√≥n urbana con mejor accesibilidad a servicios de salud 
    en √°reas metropolitanas, t√≠pico de entornos urbanos densos.
    
    **Loreto**: Evidencia los desaf√≠os de dispersi√≥n geogr√°fica caracter√≠sticos de la Amazon√≠a, 
    con mayores distancias entre centros de salud y poblaciones, reflejando la necesidad de 
    estrategias de salud m√≥vil o itinerante.
    """)

# Footer
st.markdown("---")
st.caption("¬© 2024 - An√°lisis de Acceso a Hospitales en Per√∫ | Datos: MINSA - IPRESS")
